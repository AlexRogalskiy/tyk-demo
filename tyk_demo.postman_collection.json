{
	"info": {
		"_postman_id": "9db4b68a-a5c8-40b0-870f-238e4b2e9843",
		"name": "Tyk Demo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "API Definition",
			"item": [
				{
					"name": "Middleware",
					"item": [
						{
							"name": "Middleware - JavaScript",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d221573c-7af0-4d9d-be19-7ed4be962254",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body data is set by middleware\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.eql(\"Request body set by pre middleware\");",
											"});",
											"",
											"pm.test(\"'added' URL parameter is added by middleware \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.args.added).to.eql(\"123\");",
											"});",
											"",
											"pm.test(\"'Config-Data' header is added by middleware\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.headers['Config-Data']).to.eql(\"config-value\");",
											"});",
											"",
											"pm.test(\"'Accepted' header is unchanged by middleware\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.headers['Accepted']).to.eql(\"789\");",
											"});",
											"",
											"pm.test(\"Request is redirected by middleware\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.url).to.contain(\"/anything/post\");",
											"});",
											"",
											"pm.test(\"'Deleted' header is deleted by middleware\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.headers['Deleted']).to.eql(undefined);",
											"});",
											"",
											"pm.test(\"'User-Agent' header is set by middleware\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.headers['User-Agent']).to.eql(\"Tyk-JavaScript-Middleware\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Deleted",
										"value": "deleted value",
										"type": "text"
									},
									{
										"key": "Accepted",
										"value": "789",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8080/javascript-middleware-api/post?deleted=deleted-value&accepted=456",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"javascript-middleware-api",
										"post"
									],
									"query": [
										{
											"key": "deleted",
											"value": "deleted-value"
										},
										{
											"key": "accepted",
											"value": "456"
										}
									]
								},
								"description": "Calls the `JavaScript Middleware API`, which executes two JavaScript middleware functions at the `pre` and `post` hooks.\n\nThe `pre` function does the following:\n- Writes to the API Gateway application log\n- Adds `User-Agent` header\n- Deletes `Deleted` header\n- Adds `added` URL parameter\n- Deletes `deleted` URL parameter\n- Changes the request body - see `data` property of response object\n- Changes the requested URL - see `url` property of response object\n\nThe `post` function does the following:\n- Writes to the API Gateway application log\n- Adds `config-data` header using value taken from API definition `config data`"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Endpoint Designer",
					"item": [
						{
							"name": "Plugin - Mock Response",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f24eb4f-e606-42ed-b3f6-059bb4ebd45e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Mock response data is returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.mock).to.eql(\"response\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-version",
										"value": "Default",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/mock",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"mock"
									]
								},
								"description": "This request uses the `Mock Response` Endpoint Designer plugin to return a response directly from the Gateway when the API endpoint is called.\n\nThe mock response sets the response:\n- HTTP status code: `200 OK`\n- Body: See the mock JSON object in the response body\n- Headers: See the `Mock` header in the repsonse headers\n\nWhen the Mock Response is executed, the request does not reach the API Server.\n\nThis plugin is defined in the Endpoint Designer of the API Definition. It is set to execute on requests for the `Default` version of the API only, see part 2 of this plugin to see what happens when version `2` is requested instead. Control of the version is"
							},
							"response": []
						},
						{
							"name": "Plugin - Blacklist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "974b53b0-eb6e-40b1-bec2-ca3f72707d0e",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Error message is 'Requested endpoint is forbidden'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"Requested endpoint is forbidden\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/blacklist",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"blacklist"
									]
								},
								"description": "The Blacklist plugin blocks requests, returning a `403 Forbidden` response."
							},
							"response": []
						},
						{
							"name": "Plugin - Circuit Breaker",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0655fbac-47b2-428d-b9ba-9ee31f13628f",
										"exec": [
											"pm.test(\"5th server error response triggers circuit breaker\", function () {",
											"    var circuitBreakerRequest = {",
											"      url: 'http://localhost:8080/plugin-demo-api/status/500',",
											"      method: 'GET'",
											"    };",
											"    ",
											"    pm.sendRequest(circuitBreakerRequest, function (err, response) {",
											"        pm.response.to.have.status(500);",
											"",
											"        pm.sendRequest(circuitBreakerRequest, function (err, response) {",
											"            pm.response.to.have.status(500);",
											"            ",
											"            pm.sendRequest(circuitBreakerRequest, function (err, response) {",
											"                pm.response.to.have.status(500);",
											"                ",
											"                pm.sendRequest(circuitBreakerRequest, function (err, response) {",
											"                    pm.response.to.have.status(500);",
											"",
											"                    pm.sendRequest(circuitBreakerRequest, function (err, response) {",
											"                        pm.response.to.have.status(500);",
											"                    });",
											"                });",
											"            });",
											"        });",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/status/500",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"status",
										"500"
									]
								},
								"description": "The Circuit Breaker can protect API servers by blocking requests for endpoints which are consistently returning errors.\n\nThe plugin monitors the responses from the API server for errors. If the API server returns over a certain number of errors over a particular number of requests then the API Gateway will stop proxing requests to it for a number of seconds. When the circuit breaker is activated, the API Gateway returns a `503 Service Unavailable` response.\n\nIn this example, the endpoint called by this request always returns `500 Server Error` responses, so will easily trigger the circuit breaker. The circuit breaker has been set up to sample 4 requests, and if over 50% of them result in errors then the circuit breaker will be active for 15 seconds."
							},
							"response": []
						},
						{
							"name": "Plugin - Body Transform",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "610c8cee-4db8-4639-877a-05ba22d4013e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body data transformed to JSON\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.json[\"Beijing_VPN\"]).to.eql(\"127.0.0.2\");",
											"    pm.expect(jsonData.json[\"Shanghai_VPN\"]).to.eql(\"127.0.0.1\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<servers version=\"1\">\n  <server>\n    <serverName>Shanghai_VPN</serverName>\n    <serverIP>127.0.0.1</serverIP>\n  </server>\n  <server>\n    <serverName>Beijing_VPN</serverName>\n    <serverIP>127.0.0.2</serverIP>\n  </server>\n</servers>"
								},
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/body-transform",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"body-transform"
									]
								},
								"description": "The Body Transform plugin can transform data in XML and JSON formats using templates. The output format can be anything, it depends entirely on the template. Transforms can be applied to both requests and responses.\n\nThis example applies a transform on the request, changing it from XML to JSON. You can see the request body is an XML document, but the response shows that the API server receive the data as JSON - you can verify this by checking the `data` and `json` properties of the response body."
							},
							"response": []
						},
						{
							"name": "Plugin - Enforced Timeout (part 1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9acc4784-3ecc-4840-b1c4-fdf4b0e8b3d6",
										"exec": [
											"pm.test(\"Status code is 504\", function () {",
											"    pm.response.to.have.status(504);",
											"});",
											"",
											"pm.test(\"Response time is more than 3 seconds\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.above(3000);",
											"});",
											"",
											"pm.test(\"Response time is less than 6 seconds\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(6000);",
											"});",
											"",
											"pm.test(\"Error message is 'Upstream service reached hard timeout.'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"Upstream service reached hard timeout.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/delay/6",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"delay",
										"6"
									]
								},
								"description": "The Enforced Timeout plugin will return an error response from the Gateway if the API server does not respond within a set time. \n\nThis request calls the `/delay/6` endpoint, which has a 6 second delay before responding. The endpoint uses the Enforced Timeout plugin, which is configured for 4 seconds, so will repsond with a `504 Gateway Timeout` before the API server can provide a response."
							},
							"response": []
						},
						{
							"name": "Plugin - Enforced Timeout (part 2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3fe9df3-ae8f-46d1-ad3e-fc63e822b650",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is more than 1 second\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.above(1000);",
											"});",
											"",
											"pm.test(\"Response time is less than 3 seconds\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/delay/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"delay",
										"1"
									]
								},
								"description": "This endpoint has the same configuration at part 1, but because this endpoint only has a 1 second delay, it responds in time, so the API client receives the API server response and the Enforced Timeout is not activated."
							},
							"response": []
						},
						{
							"name": "Plugin - URL Rewrite (part 1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da6a66ec-a4b0-4a46-b21a-51b2e1da384e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"URL rewritten to '/anything/default-rewrite'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.url).to.contain(\"/anything/default-rewrite\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/url-rewrite",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"url-rewrite"
									]
								},
								"description": "The URL Rewrite plugin can rewrite the URL based on many different parameters. This example shows the most basic version, using the default rewrite, which is used if none of the advanced rewrite rules are triggered. In this case, it rewrites to `/anything/default-rewrite` - check the `url` property in the response body to see the URL which was called on the API server.\n\nThe advanced rewriter can perform rewriting based on many aspects of a request:\n\n- URL query\n- Header\n- Path\n- Body\n- Session metadata\n- Context data\n\nSee the other parts of the URL Rewrite example for examples of the advanced URL rewriting rules."
							},
							"response": []
						},
						{
							"name": "Plugin - URL Rewrite (part 2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "410eddf2-fca2-4372-8a7d-888dd4c12038",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"URL rewritten to '/anything/rewrite-query'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.url).to.contain(\"/anything/rewrite-query\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/url-rewrite?query=rewrite",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"url-rewrite"
									],
									"query": [
										{
											"key": "query",
											"value": "rewrite"
										}
									]
								},
								"description": "This example triggers an advanced URL rewrite rule based on the URL parameter. It checks for a parameter with the key `query` and value `rewrite`. The plugin rewrites to the URL `/anything/rewrite-query`."
							},
							"response": []
						},
						{
							"name": "Plugin - URL Rewrite (part 3)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a2027ce-ccd4-411b-8b7a-0e0b9a6adbe7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"URL rewritten to '/anything/rewrite-header'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.url).to.contain(\"/anything/rewrite-header\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Header",
										"value": "rewrite",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/url-rewrite",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"url-rewrite"
									]
								},
								"description": "This example triggers an advanced URL rewrite rule based on the request headers. It checks for a header with the key `Header` and value `rewrite`. The plugin rewrites to the URL `/anything/rewrite-header`."
							},
							"response": []
						},
						{
							"name": "Plugin - Modify Headers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5346d84-e2bc-479e-b440-8b0413715339",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"'New-Header' header is present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.headers['New-Header']).to.eql(\"new-header-value\");",
											"});",
											"",
											"pm.test(\"'Delete-Header' header not present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.headers['Delete-Header']).to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Delete-Header",
										"value": "deleted-header-value",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/modify-headers",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"modify-headers"
									]
								},
								"description": "This plugin can add and remove headers. In this example is adds a header called `New-Header` with the value `new-header-value`, and removes a header called `Delete-Header` which is sent in the request."
							},
							"response": []
						},
						{
							"name": "Plugin - Cache",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7858146-77a7-4df2-88a6-9a0c5b6ebb91",
										"exec": [
											"var cacheRequest = {",
											"    url: 'http://localhost:8080/plugin-demo-api/uuid',",
											"    method: 'GET'",
											"};",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is same across two requests\", function() {",
											"    var response1;",
											"    var response2;",
											"    pm.sendRequest(cacheRequest, function (err, response) {",
											"        response1 =pm.response.json().uuid;",
											"        ",
											"         pm.sendRequest(cacheRequest, function (err, response) {",
											"            response2 =pm.response.json().uuid;",
											"            pm.expect(response1).to.eql(response2);",
											"        });",
											"    });",
											"});",
											"",
											"pm.test(\"Cached response contains 'X-Tyk-Cached-Response' header set to '1'\", function() {",
											"    pm.sendRequest(cacheRequest, function (err, response) {",
											"         pm.sendRequest(cacheRequest, function (err, response) {",
											"            pm.expect(response.headers.get(\"X-Tyk-Cached-Response\")).to.eql(\"1\");",
											"        });",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-version",
										"type": "text",
										"value": "Default"
									}
								],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/uuid",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"uuid"
									]
								},
								"description": "This request uses the `Cache` Endpoint Designer plugin to return a cached response directly from the Gateway when the API endpoint is called.\n\n- Global Cache is enabled\n- Response from Upstream will be cached for 5 seconds\n\n\nWhen this API executed, the response from upstream API server will be cached and served for upto 5 seconds to the subsequest requests made to same Endpoint. If the Gateway returns a cached response then it will also a header `X-Tyk-Cached-Response` to the response with the value of `1`.\n\nThis plugin is defined in the Endpoint Designer of the API Definition. It is set to execute on requests for the `Default` version of the API only."
							},
							"response": []
						},
						{
							"name": "Plugin - Validate JSON (part 1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c66f7cf7-6798-40d7-a290-bdd97c9d273f",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Error message is 'firstName: firstName is required'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"firstName: firstName is required\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"lastName\": \"Hoskins\",\n\t\"age\": 71\n}"
								},
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/validate-json",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"validate-json"
									]
								},
								"description": "The Validate JSON plugin will validate the JSON in the request body against a JSON scheme defined in the plugin configuration. If the request fails validation then the API Gateway returns a `422 Unprocessable Entity` HTTP status and a detailed description of the problem in the response body.\n\nFor this example, the JSON sent in the request body did not include a `firstName` property, so the request is rejected with a response specifically referencing the missing property.\n\nFor reference, the JSON schema used in this example:\n\n```\n{\n  \"title\": \"Person\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"firstName\": {\n      \"type\": \"string\"\n    },\n    \"lastName\": {\n      \"type\": \"string\"\n    },\n    \"age\": {\n      \"description\": \"Age in years\",\n      \"type\": \"integer\",\n      \"minimum\": 0\n    }\n  },\n  \"required\": [\"firstName\", \"lastName\"]\n}\n```"
							},
							"response": []
						},
						{
							"name": "Plugin - Validate JSON (part 2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5297f300-b0c6-4ae2-840e-f5a8959a7a7d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Valid JSON data sent\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.json.age).to.eql(71);",
											"    pm.expect(jsonData.json.firstName).to.eql(\"Bob\");",
											"    pm.expect(jsonData.json.lastName).to.eql(\"Hoskins\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"firstName\": \"Bob\",\n\t\"lastName\": \"Hoskins\",\n\t\"age\": 71\n}"
								},
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/validate-json",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"validate-json"
									]
								},
								"description": "This example sends a valid payload, so is accepted and a normal response is received from the API server."
							},
							"response": []
						},
						{
							"name": "Plugin - Request Size Limit (part 1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12d5e16f-5b85-4ea5-bfb9-218e51036731",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error message is 'Request is too large'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"Request is too large\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "1234567890"
								},
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/request-size-limit",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"request-size-limit"
									]
								},
								"description": "The Request Size Limit Plugin validates the size of the request body against defined maximum size in byte.\n\nIn this example, the plugin is configured to only allow requests with a maximum payload size of 9 bytes. The request sends a body with 10 bytes, so is rejected with a `400 Bad Request` response."
							},
							"response": []
						},
						{
							"name": "Plugin - Request Size Limit (part 2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f36556f2-7ae8-458b-ac19-fbe883dc7207",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Request body is 9 bytes\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.eql(\"123456789\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "123456789"
								},
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/request-size-limit",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"request-size-limit"
									]
								},
								"description": "This example succeeds because the request is 9 bytes, which the same as the configured maximum value in the plugin."
							},
							"response": []
						},
						{
							"name": "Plugin - Method Transform",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1fb13e39-988d-4eb5-979d-a801f78bb764",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Request method is changed to POST\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.method).to.eql(\"POST\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/method-transform",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"method-transform"
									]
								},
								"description": "The Method Transform plugin changes the HTTP method used in the request. In this example, it changes the PUT method to a POST. Check the `method` property in the response body to see the method used."
							},
							"response": []
						},
						{
							"name": "Plugin - Track Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ced83432-5ad4-404c-97a0-23801b4a145f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/track-endpoint",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"track-endpoint"
									]
								},
								"description": "The Track Endpoint plugin will record analytics about the number of times this individual endpoint has been requested. The analytics for this are visible in the Endpoint Popularity report in the Dashboard."
							},
							"response": []
						},
						{
							"name": "Plugin - Global Version Settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7cce0717-e4e3-401e-a209-f9aae271c566",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"'Global-Add' header added to request\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.headers['Global-Add']).to.eql(\"global-value\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "global-delete",
										"value": "deleted-header",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/global-version-settings",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"global-version-settings"
									]
								},
								"description": "The Global Version Settings plugin are applied to all endpoints for the version of the API. This plugin allows you to delete and add headers to the request. \n\nFor this example, the plugin will delete the header `global-delete` and will add a header `global-add` with the value `global-value`. Check the response body and you will see the added header, but not the deleted header in the `headers` array.\n\nThis plugin has been configured for the `default` version of the Plugin Demo API, so you will it taking effect on any request using this API version."
							},
							"response": []
						},
						{
							"name": "Plugin - Virtual Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd1e9129-8212-4a7c-a337-2ddb44be18ec",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type is present and set to 'text/plain; charset=utf-8'\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.response.to.be.header(\"Content-Type\", \"text/plain; charset=utf-8\")",
											"});",
											"",
											"pm.test(\"Response body is 'Virtual endpoint response body'\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Virtual endpoint response body\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/virtual-endpoint",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"virtual-endpoint"
									]
								},
								"description": "The Virtual Endpoint plugin executes JavaScript to generate a response. The JavaScript is defined in the plugin or provided in a file. The JavaScript has access to special Tyk helper functions which make performing certain tasks easy:\n\n- Generating a response\n- Writing to the application log\n- Making an HTTP request\n\nThe JavaScript is executed by a JavaScript virtual machine which runs within the Gateway. When the plugin is run it provide access to the request data, session data and API configuration data. The plugin can also make requests out to other services, allowing for orchestration across multiple upstream API servers.\n\nIn this example, the plugin simply returns a basic plain text response with a `200 OK` status code."
							},
							"response": []
						},
						{
							"name": "Plugin - Whitelist (part 1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a8be18c-afaf-4163-a103-024ccbea8d86",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-version",
										"value": "whitelist",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/whitelist",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"whitelist"
									]
								},
								"description": "The Whitelist plugin causes the API Gateway to reject requests for any endpoints which are not explictly whitelisted. \n\nFor this example a separate version of the Plugin Demo API has been created, called `whitelist`, and it has a single endpoint defined `/anything/whitelist$`. The `$` at the end of the string is the regular expression character for 'end of the string', which if not used would mean that any paths which start `/anything/whitelist` i.e. `/anything/whitelist-123` would also be accepted."
							},
							"response": []
						},
						{
							"name": "Plugin - Whitelist (part 2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3cf54b84-b9b1-41eb-8326-d8631172f97e",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Error message is 'Requested endpoint is forbidden'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"Requested endpoint is forbidden\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-version",
										"type": "text",
										"value": "whitelist"
									}
								],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/whitelist-123",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"whitelist-123"
									]
								},
								"description": "This request is rejected as the requested path `/anything/whitelist-123` has not been defined with the Whitelist plugin. The API Gateway responds with a `403 Forbidden` response."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb07dae3-7b98-4845-bcaa-c9a4e3ffce29",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f81952ab-8487-4e06-a0e2-5e7fa569b7c4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Versioning",
					"item": [
						{
							"name": "Versioning (part 1) - Mock response",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "710fb95f-27e0-4150-8342-f60c48b727f4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Mock response body returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.mock).to.eql(\"response\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-version",
										"value": "Default",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/mock",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"mock"
									]
								},
								"description": "This request uses the `Mock Response` Endpoint Designer plugin to demonstrate versioning. It shows how the API Gateway can change behaviour based on the requested version of an API. Using API versioning allows you to redefine how the API Gateway will handle endpoint requests.\n\nThe API used here has two versions:\n- `Default`: the default version, used in this request, which returns a mock response directly from the Gateway\n- `2`: the second version, used in part 2, which returns a response from the API server\n\nBoth versions make a request to the same API and API endpoint. The versioning is controlled by the `x-api-version` header in the request, which the Gateway will check to decide how the handle the request."
							},
							"response": []
						},
						{
							"name": "Versioning (part 2) - Normal response",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ba57ea1-5b57-430e-a6e8-936ab717381c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Mock response body not returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.mock).not.eql(\"response\");",
											"});",
											"",
											"pm.test(\"Version 2 of the API was requested\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.headers[\"X-Api-Version\"]).to.eql(\"2\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-version",
										"type": "text",
										"value": "2"
									}
								],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/mock",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"mock"
									]
								},
								"description": "Part 2 of the versioning example. This request shows that when version `2` of the API is requested, the API Gateway proxies the request to the API server.\n\nThis request uses the same URL as part 1, but uses `2` as the value for the `x-api-version` request header."
							},
							"response": []
						},
						{
							"name": "Versioning (part 3) - Expired version",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "456d1ae6-3e7a-4cf2-9ecb-16fab28dfd12",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Error message is 'Api Version has expired, please check documentation or contact administrator'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"Api Version has expired, please check documentation or contact administrator\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-version",
										"type": "text",
										"value": "expired"
									}
								],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/mock",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"mock"
									]
								},
								"description": "This request shows that version can be expired. In this case a version called `expired` was created with an expiry date in the past. This means that requests for this version are rejected by the Gateway, with a message provided in the response body which says the version has expired."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Advanced Options",
					"item": [
						{
							"name": "Webhooks",
							"item": [
								{
									"name": "Webhooks - Authentication Failure",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87a33603-0dd6-48c5-a382-261b9cafa646",
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"// Add test to check if webhook fired"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "auth-failure-key",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://localhost:8080/basic-protected-api/get",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"basic-protected-api",
												"get"
											]
										},
										"description": "This example makes an unauthenticated request to the `Basic Protected API`. The API requires authentication so the request fails, as expected, with a `403 Forbidden` response.\n\nThe `Basic Protected API` is configured to use a webhook in the event of authentication failure. This webhook calls another API, passing information about the failed request. You can see this webhook call in the Dashboard analytics, it's made to the `Webhook Receiver` API, and will appear straight after this failed API request to `Basic Protected API`. In the analytics record, check the body of the request to see origin of the request and key which was used.\n\nWebhooks can be set up to handle lots of different types of events, such as rate limit exceeded, quota exceeded etc. They can also be configured with a cooldown time so that the events don't overload the API receiving the webhooks."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Context Variables",
							"item": [
								{
									"name": "Context Variables - Correlation Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7d6f0cb-1107-404c-925e-836c0b05d239",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"'X-Req-Id' header is a UUID\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.headers[\"X-Req-Id\"]).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/basic-open-api/get",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"basic-open-api",
												"get"
											]
										},
										"description": "Header `X-Req-Id` is injected by the Gateway, and can be seen in the response body. \n\nThe header value is a GUID representing the random id assigned to each request by the Gateway. It is configured using the Tyk context variable `$tyk_context.request_id`.\n\nThe value is accessible to various parts of the Tyk middleware chain, so can be used as a reference when processing requests."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Core Settings",
					"item": [
						{
							"name": "Authentication",
							"item": [
								{
									"name": "Authentication Token",
									"item": [
										{
											"name": "Token authorization - failure (part 1)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d1873999-d360-4fe1-9f89-dfff6327f9d9",
														"exec": [
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"Error message is 'Authorization field missing'\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.error).to.eql(\"Authorization field missing\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://localhost:8080/basic-protected-api/get",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"basic-protected-api",
														"get"
													]
												},
												"description": "This API will showcase the Token authorization feature of Tyk.\n\nAn key is not provided in the HTTP header field `Authorization`, resulting in am HTTP status code `401 Unauthorized` returned by the Gateway."
											},
											"response": []
										},
										{
											"name": "Token authorization - failure (part 2)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "26bd1dcc-e158-4c37-b3a8-dd8af2c3990d",
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Error message is 'Access to this API has been disallowed'\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.error).to.eql(\"Access to this API has been disallowed\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "missing_key"
													}
												],
												"url": {
													"raw": "http://localhost:8080/basic-protected-api/get",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"basic-protected-api",
														"get"
													]
												},
												"description": "This request attempts to authenticate with a key which does not exist - `missing_key`.\n\nThis results in am HTTP status code `403 Forbidden` response from the Gateway."
											},
											"response": []
										},
										{
											"name": "Token authorization - success",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "52005b10-9ba0-4fa0-bfc2-868e1f7dbc1d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"'auth_key' used in 'Authorization' header\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.headers['Authorization']).to.eql(\"auth_key\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "auth_key",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://localhost:8080/basic-protected-api/get",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"basic-protected-api",
														"get"
													]
												},
												"description": "This API showcases the Token authorization feature of Tyk.\n\nThe key is sent in the HTTP header field `Authorization`. It has been authorized access to the `Basic Protected API`, so the request is accepted by the Gateway."
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8fc46ba1-a647-47d2-b4f4-c32de2daa44b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6db73cf2-9f98-4815-9033-45e904b48e67",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "JSON Web Token",
									"item": [
										{
											"name": "JWT - shared HMAC secret",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f1a7b288-9211-4eff-bad5-cb5274f265c9",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwicG9sIjoiNWVhZDcyOTU1NzU5NjEwMDAxODE4Njg4In0.8xOVZJM8Qi4XySrJRMZtaNkaq-Bw3am0gLHFKAHY5OQ",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://localhost:8080/jwt-api/get",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"jwt-api",
														"get"
													]
												},
												"description": "This request uses JWT authentication using a shared HMAC secret. In this case, the secret is defined on the API definition, but it is also possible to define it separately, which allows multiple secrets to be used.\n\nThe JWT claims are processed as follows:\n\n* `sub`: This is the subject, and is used by Tyk as the identity of the API Client. Tyk creates a session based on the value provided here, which allows it to maintain state for the subject across multiple requests.\n* `pol`: This is the Id of the Policy to use, if the request is authenticated. If no Id is provided then the API Definition specifies a default Policy to use.\n\nFor reference, the payload of the JWT:\n\n```json\n{\n  \"sub\": \"1234567890\",\n  \"pol\": \"5ead72955759610001818688\"\n}\n```"
											},
											"response": []
										},
										{
											"name": "JWT - shared HMAC secret with claim (part 1)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "53799a29-8da3-4822-ad2f-e5abab82446a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwicG9saWN5X2NsYWltIjoicmVzdHJpY3RlZCJ9.nqQNDkB6--bOY48D2G8PZQSwvZduAqVWUUWTpyA1dDU"
													}
												],
												"url": {
													"raw": "http://localhost:8080/jwt-api/anything/allowed-path",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"jwt-api",
														"anything",
														"allowed-path"
													]
												},
												"description": "This request uses a claim in the JWT to define the Policy to use. In this case, the API Definition is configured to inspect the `policy_claim` claim and match the value (`restricted`) against the list defined in the API Definition. \n\nIn this case, the claim matches against the `JWT Policy Restricted` Policy, which uses path-based permissions to only allow requests for `GET /anything/allowed-path`. Requests for other endpoints will be rejected - see part 2.\n\nFor reference, the payload of the JWT:\n\n```json\n{\n  \"sub\": \"1234567890\",\n  \"policy_claim\": \"restricted\"\n}\n```"
											},
											"response": []
										},
										{
											"name": "JWT - shared HMAC secret with claim (part 2)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1f848342-f06b-446d-b597-5fd99fa2efcd",
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Error message is `Access to this resource has been disallowed`\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.error).to.eql(\"Access to this resource has been disallowed\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwicG9saWN5X2NsYWltIjoicmVzdHJpY3RlZCJ9.nqQNDkB6--bOY48D2G8PZQSwvZduAqVWUUWTpyA1dDU"
													}
												],
												"url": {
													"raw": "http://localhost:8080/jwt-api/anything/restricted-path",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"jwt-api",
														"anything",
														"restricted-path"
													]
												},
												"description": "This request fails because it attempts to access an endpoint which is not listed in the path-based permissions defined in the Policy. The Gateway responds with a `403 Forbidden`."
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Basic Authentication",
									"item": [
										{
											"name": "Basic Authentication",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cf01d3a9-271e-4639-b72e-6ede9dc9ff10",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YmFzaWMtYXV0aC11c2VybmFtZTpiYXNpYy1hdXRoLXBhc3N3b3Jk",
														"type": "text"
													}
												],
												"url": {
													"raw": "http://localhost:8080/basic-authentication-api/get",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"basic-authentication-api",
														"get"
													]
												},
												"description": "This request uses basic authentication to access the Basic Authentication API. Basic authenticate is based on a username and password.\n\nThe request has an `Authorization` header which has a value comprised of a prefix `Basic` and a base64 encoded representation of the credentials. The value used is the username and password separated with a colon. In this case the username is `basic-auth-username` and the password is `basic-auth-password`, so this gives `basic-auth-username:basic-auth-password`, which is `YmFzaWMtYXV0aC11c2VybmFtZTpiYXNpYy1hdXRoLXBhc3N3b3Jk` when base64 encoded."
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Rate Limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "541cc9e5-3e6f-4447-86f8-d271d6a8ac27",
										"exec": [
											"var keyId = pm.variables.replaceIn('{{$randomUUID}}');",
											"",
											"var rateLimitTestKeyCreateRequest = {",
											"  url: 'http://localhost:8080/tyk/keys/' + keyId,",
											"  method: 'POST',",
											"  header: 'x-tyk-authorization:28d220fd77974a4facfb07dc1e49c2aa',",
											"  body: {",
											"      mode: 'raw',",
											"      raw: JSON.stringify({\"last_check\":0,\"allowance\":2,\"rate\":2,\"per\":5,\"throttle_interval\":-1,\"throttle_retry_limit\":-1,\"date_created\":\"2020-04-23T04:40:22.3984988Z\",\"expires\":0,\"quota_max\":-1,\"quota_renews\":1587616821,\"quota_remaining\":-1,\"quota_renewal_rate\":-1,\"access_rights\":{\"accbdd1b89e84ec97f4f16d4e3197d5c\":{\"api_name\":\"Basic Protected API\",\"api_id\":\"accbdd1b89e84ec97f4f16d4e3197d5c\",\"versions\":[\"Default\"],\"allowed_urls\":[],\"limit\":null,\"allowance_scope\":\"\"}},\"org_id\":\"5e9d9544a1dcd60001d0ed20\",\"oauth_client_id\":\"\",\"oauth_keys\":null,\"certificate\":\"\",\"basic_auth_data\":{\"user\":\"\",\"password\":\"\",\"hash_type\":\"\"},\"jwt_data\":{\"secret\":\"\"},\"hmac_enabled\":false,\"hmac_string\":\"\",\"is_inactive\":false,\"apply_policy_id\":\"\",\"apply_policies\":[],\"data_expires\":0,\"monitor\":{\"trigger_limits\":null},\"enable_detail_recording\":false,\"meta_data\":{},\"tags\":[],\"alias\":\"\",\"last_updated\":\"1587616822\",\"id_extractor_deadline\":0,\"session_lifetime\":0})",
											"  }",
											"};",
											"",
											"pm.sendRequest(rateLimitTestKeyCreateRequest, function (err, response) { ",
											"    pm.test(\"Status code is 429\", function () {",
											"        var rateLimitRequest = {",
											"            url: 'http://localhost:8080/basic-protected-api/get',",
											"            method: 'GET',",
											"            header: 'Authorization:' + keyId",
											"        };",
											"        ",
											"        pm.sendRequest(rateLimitRequest, function (err, response) {",
											"            pm.expect(response.code).to.eql(200);",
											"",
											"            pm.sendRequest(rateLimitRequest, function (err, response) {",
											"                pm.expect(response.code).to.eql(200);",
											"",
											"                pm.sendRequest(rateLimitRequest, function (err, response) {",
											"                    pm.expect(response.code).to.eql(429);",
											"                    ",
											"                    var rateLimitTestKeyDeleteRequest = {",
											"                        url: 'http://localhost:8080/tyk/keys/' + keyId,",
											"                        method: 'DELETE',",
											"                        header: 'x-tyk-authorization:28d220fd77974a4facfb07dc1e49c2aa'",
											"                    };",
											"                ",
											"                    pm.sendRequest(rateLimitTestKeyDeleteRequest, function (err, response) { });",
											"",
											"                });",
											"            });",
											"        });",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "ratelimit_key",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8080/basic-protected-api/get",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"basic-protected-api",
										"get"
									]
								},
								"description": "This API will showcase the Rate limiting feature of Tyk.\n\nRate limit is set as 2 per 5 seconds. More than 2 request per 5 will result in `429  Too many requests` error from gateway."
							},
							"response": []
						},
						{
							"name": "Throttling",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f51d2db0-d520-40db-bdbc-2ee7aab7917e",
										"exec": [
											"var keyId = pm.variables.replaceIn('{{$randomUUID}}');",
											"",
											"var throttlingTestKeyCreateRequest = {",
											"  url: 'http://localhost:8080/tyk/keys/' + keyId,",
											"  method: 'POST',",
											"  header: 'x-tyk-authorization:28d220fd77974a4facfb07dc1e49c2aa',",
											"  body: {",
											"      mode: 'raw',",
											"      raw: JSON.stringify({\"last_check\":0,\"allowance\":2,\"rate\":2,\"per\":5,\"throttle_interval\":5,\"throttle_retry_limit\":2,\"date_created\":\"2020-04-23T04:41:37.0404484Z\",\"expires\":0,\"quota_max\":-1,\"quota_renews\":1587616896,\"quota_remaining\":-1,\"quota_renewal_rate\":-1,\"access_rights\":{\"accbdd1b89e84ec97f4f16d4e3197d5c\":{\"api_name\":\"Basic Protected API\",\"api_id\":\"accbdd1b89e84ec97f4f16d4e3197d5c\",\"versions\":[\"Default\"],\"allowed_urls\":[],\"limit\":null,\"allowance_scope\":\"\"}},\"org_id\":\"5e9d9544a1dcd60001d0ed20\",\"oauth_client_id\":\"\",\"oauth_keys\":null,\"certificate\":\"\",\"basic_auth_data\":{\"user\":\"\",\"password\":\"\",\"hash_type\":\"\"},\"jwt_data\":{\"secret\":\"\"},\"hmac_enabled\":false,\"hmac_string\":\"\",\"is_inactive\":false,\"apply_policy_id\":\"\",\"apply_policies\":[],\"data_expires\":0,\"monitor\":{\"trigger_limits\":null},\"enable_detail_recording\":false,\"meta_data\":{},\"tags\":[],\"alias\":\"\",\"last_updated\":\"1587616897\",\"id_extractor_deadline\":0,\"session_lifetime\":0})",
											"  }",
											"};",
											"",
											"pm.sendRequest(throttlingTestKeyCreateRequest, function (err, response) { ",
											"    pm.test(\"Status code is 200\", function () {",
											"        var throttleRequest = {",
											"            url: 'http://localhost:8080/basic-protected-api/get',",
											"            method: 'GET',",
											"            header: 'Authorization:' + keyId",
											"        };",
											"        ",
											"        pm.sendRequest(throttleRequest, function (err, response) {",
											"            pm.expect(response.code).to.eql(200);",
											"",
											"            pm.sendRequest(throttleRequest, function (err, response) {",
											"                pm.expect(response.code).to.eql(200);",
											"",
											"                pm.sendRequest(throttleRequest, function (err, response) {",
											"                    pm.expect(response.code).to.eql(200);",
											"                    ",
											"                    var throttlingTestKeyDeleteRequest = {",
											"                            url: 'http://localhost:8080/tyk/keys/' + keyId,",
											"                            method: 'DELETE',",
											"                            header: 'x-tyk-authorization:28d220fd77974a4facfb07dc1e49c2aa'",
											"                        };",
											"                    ",
											"                    pm.sendRequest(throttlingTestKeyDeleteRequest, function (err, response) { });",
											"                });",
											"            });",
											"        });",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "throttle_key"
									}
								],
								"url": {
									"raw": "http://localhost:8080/basic-protected-api/get",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"basic-protected-api",
										"get"
									]
								},
								"description": "This API will showcase the Throttling feature of Tyk.\n\nRate limit is set as 2 per 5 seconds. Gateway Throttling is configured for 10 times with 1 sec interval. \n\nWe can obeserve a delay in response due to throttling after the rate limit has been reached."
							},
							"response": []
						},
						{
							"name": "Quota Limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a86aa937-32c3-4e67-b780-96dd4060d968",
										"exec": [
											"var keyId = pm.variables.replaceIn('{{$randomUUID}}');",
											"",
											"var quotaTestKeyCreateRequest = {",
											"    url: 'http://localhost:8080/tyk/keys/' + keyId,",
											"    method: 'POST',",
											"    header: 'x-tyk-authorization:28d220fd77974a4facfb07dc1e49c2aa',",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({\"last_check\":0,\"allowance\":1000,\"rate\":1000,\"per\":60,\"throttle_interval\":-1,\"throttle_retry_limit\":-1,\"date_created\":\"2020-04-23T04:43:07.8812258Z\",\"expires\":0,\"quota_max\":2,\"quota_renews\":1587620587,\"quota_remaining\":2,\"quota_renewal_rate\":3600,\"access_rights\":{\"accbdd1b89e84ec97f4f16d4e3197d5c\":{\"api_name\":\"Basic Protected API\",\"api_id\":\"accbdd1b89e84ec97f4f16d4e3197d5c\",\"versions\":[\"Default\"],\"allowed_urls\":[],\"limit\":null,\"allowance_scope\":\"\"}},\"org_id\":\"5e9d9544a1dcd60001d0ed20\",\"oauth_client_id\":\"\",\"oauth_keys\":null,\"certificate\":\"\",\"basic_auth_data\":{\"user\":\"\",\"password\":\"\",\"hash_type\":\"\"},\"jwt_data\":{\"secret\":\"\"},\"hmac_enabled\":false,\"hmac_string\":\"\",\"is_inactive\":false,\"apply_policy_id\":\"\",\"apply_policies\":[],\"data_expires\":0,\"monitor\":{\"trigger_limits\":null},\"enable_detail_recording\":false,\"meta_data\":{},\"tags\":[],\"alias\":\"\",\"last_updated\":\"1587616987\",\"id_extractor_deadline\":0,\"session_lifetime\":0})",
											"  }",
											"};",
											"",
											"pm.sendRequest(quotaTestKeyCreateRequest, function (err, response) { ",
											"    pm.test(\"Status code is 403\", function () {",
											"        var quotaRequest = {",
											"            url: 'http://localhost:8080/basic-protected-api/get',",
											"            method: 'GET',",
											"            header: 'Authorization:' + keyId",
											"        };",
											"        ",
											"        pm.sendRequest(quotaRequest, function (err, response) {",
											"            pm.expect(response.headers.get(\"X-Ratelimit-Remaining\")).to.eql(\"1\");",
											"            pm.expect(response.code).to.eql(200);",
											"            ",
											"            pm.sendRequest(quotaRequest, function (err, response) {",
											"                pm.expect(response.headers.get(\"X-Ratelimit-Remaining\")).to.eql(\"0\");",
											"                pm.expect(response.code).to.eql(200);",
											"                ",
											"                pm.sendRequest(quotaRequest, function (err, response) {",
											"                    pm.expect(response.code).to.eql(403);",
											"                    ",
											"                    var quotaTestKeyDeleteRequest = {",
											"                        url: 'http://localhost:8080/tyk/keys/' + keyId,",
											"                        method: 'DELETE',",
											"                        header: 'x-tyk-authorization:28d220fd77974a4facfb07dc1e49c2aa'",
											"                    };",
											"                ",
											"                    pm.sendRequest(quotaTestKeyDeleteRequest, function (err, response) { });",
											"                });",
											"            });",
											"        });",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "quota_key"
									}
								],
								"url": {
									"raw": "http://localhost:8080/basic-protected-api/get",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"basic-protected-api",
										"get"
									]
								},
								"description": "This API will showcase the Quota limiting feature of Tyk.\n\nQuota limit is set as 2 per hour. More than 2 request per hour will result in `403 Forbidden` error from gateway."
							},
							"response": []
						},
						{
							"name": "Load Balancing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b49e1199-aea6-40ee-84e8-eef2fd072f2d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Consecutive requests go to different hosts\", function () {",
											"    var response1Host;",
											"    var response2Host;",
											"    var loadBalancedRequest = {",
											"        url: 'http://localhost:8080/load-balanced-api/get',",
											"        method: 'GET'",
											"    };",
											"    ",
											"    pm.sendRequest(loadBalancedRequest, function (err, response1) {",
											"        pm.response.to.have.status(200);",
											"        response1Host=response1.json().headers.Host;",
											"        pm.expect(response1Host).to.match(/^httpbin2?$/);",
											"        ",
											"        pm.sendRequest(loadBalancedRequest, function (err, response2) {",
											"            pm.response.to.have.status(200);",
											"            response2Host=response2.json().headers.Host;",
											"            pm.expect(response2Host).to.match(/^httpbin2?$/);",
											"            pm.expect(response1Host).to.not.eql(response2Host);",
											"        });",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/load-balanced-api/get",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"load-balanced-api",
										"get"
									]
								},
								"description": "This request calls an API Definition which is configured to load balance the proxied requests across multiple upstream hosts. The API Definition specifies two hosts, `httpbin` and `httpbin2`. The Gateway uses round-robin load balancing, so each host is called in turn.\n\nCheck the `headers.Host` property of the response body, it will alternative between `httpbin` and `httpbin2`. This shows that the Gateway is load balancing the upstream requests."
							},
							"response": []
						},
						{
							"name": "Uptime Tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d4ab4f3e-3f03-4197-8bee-16d0238ebee9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Host is httpbin2\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.headers.Host).to.eql(\"httpbin2\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/uptime-test-api/get",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"uptime-test-api",
										"get"
									]
								},
								"description": "This request calls an API which uses Uptime Tests to monitor the health of the upstream hosts it is configured to proxy requests to.\n\nIn this case, it is configred load balance requests upstream to `httpbin` and `httpbin2`. An uptime test has been added to the API Definition which calls the `status/500` endpoint of the `httpbin` host. This endpoint always returns `HTTP 500` status codes, which causes the uptime test to fail, triggering the removal of the `httpbin` host from the load balancer. This means that requests sent to this API will only be proxied to the `httpbin2` host, since the `httpbin` host has been marked as unhealthy.\n\nCheck the `headers.Hosts` property of the response body. This will always show `httpbin2`.\n\nIn order for the Gateway to remove the unhealthy host from the load balancer, the API Definition must have both nn Uptime Test using the same hostname, and the `check_host_against_uptime_tests` property set to `true`. If `check_host_against_uptime_tests` is not set to `true` then the unhealthy host will not be removed from the load balancer, only an event will be raised.\n\n**Note**: To reduce the amount of warning messages in the Gateway application log generated by failing tests, the uptime tests have been configured to run every 30 seconds. This means that on initial startup, the Gateway will proxy to both hosts (`httpbin` and `httpbin2`) until the first Uptime Test is run."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "System Management",
			"item": [
				{
					"name": "Importing Data",
					"item": [
						{
							"name": "Import custom key (part 1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c962e112-56a7-4d7a-91cf-aa88b3ed78f9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response action is `added`\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.action).to.eql(\"added\");",
											"});",
											"",
											"pm.test(\"Response key is not empty\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.key.length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tyk-authorization",
										"value": "28d220fd77974a4facfb07dc1e49c2aa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"last_check\": 0,\n    \"allowance\": 1000,\n    \"rate\": 1000,\n    \"per\": 60,\n    \"throttle_interval\": -1,\n    \"throttle_retry_limit\": -1,\n    \"expires\": 0,\n    \"quota_max\": -1,\n    \"quota_renews\": 1587521934,\n    \"quota_remaining\": -1,\n    \"quota_renewal_rate\": -1,\n    \"access_rights\": {\n        \"accbdd1b89e84ec97f4f16d4e3197d5c\": {\n            \"api_name\": \"Basic Protected API\",\n            \"api_id\": \"accbdd1b89e84ec97f4f16d4e3197d5c\",\n            \"versions\": [\n                \"Default\"\n            ],\n            \"allowed_urls\": [],\n            \"limit\": null,\n            \"allowance_scope\": \"\"\n        }\n    },\n    \"org_id\": \"5e9d9544a1dcd60001d0ed20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/tyk/keys/my-custom-key",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tyk",
										"keys",
										"my-custom-key"
									]
								},
								"description": "This request uses the Gateway API to import a custom key. The Gateway API is used as the Gateway is responsible for managing keys.\n\nThe URL defines the id that the key will be assigned, in this instance `my-custom-key`, which is very different to the random values assigned by the Gateway when creating keys normally.\n\nOnce imported, the key can be used to access the `Basic Protected API` (see part 2), as defined in the `access_rights` section of the key definition JSON (see request Body)."
							},
							"response": []
						},
						{
							"name": "Import custom key (part 2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a505e7f0-f385-442e-8b5d-0384bcb7eb4e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Custom key was used\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.headers[\"Authorization\"]).to.eql(\"my-custom-key\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "my-custom-key",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8080/basic-protected-api/get",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"basic-protected-api",
										"get"
									]
								},
								"description": "This request uses the custom key imported in Part 1 (which must be run prior to this) to access a protected API.\n\nThe custom key is provided in the `Authorization` header of the request."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Scaling",
					"item": [
						{
							"name": "Send request to additional Gateway",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://localhost:8081/plugin-demo-api/anything/mock",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"plugin-demo-api",
										"anything",
										"mock"
									]
								},
								"description": "This request is sent to the container mapped on port `8081`. It is the TLS-enabled Gateway which is otherwise configured the same as the HTTP-only Gateway.\n\nYou can use the `add-gateway.sh` script to add more Gateways. Note that in order to access them using this request, you will need to use `http` and change the port number - the Gateway created by the script has a random port assigned to it."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Gateway Configuration",
			"item": [
				{
					"name": "TLS",
					"item": [
						{
							"name": "TLS request to Gateway",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://localhost:8081/basic-open-api/get",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"basic-open-api",
										"get"
									]
								},
								"description": "**Prerequisite**: `tls` feature deployment.\n\nThis request uses the HTTPS scheme to connect to the API Gateway. The Gateway is configured to listen for requests on `localhost` and use a locally stored self-signed certificate.\n\nThis is configured in the `http_server_options` section of the Gateway's configuration file.\n**Note:** self-signed cetificates will fail verification by an API client, which will prevent the request for working. To resolve this, configure your client to allow self-signed certificates."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Dashboard Admin API",
			"item": [
				{
					"name": "Get Organisations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d88cbebf-d057-47e9-9ef4-694d0c8f56ba",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "admin-auth",
								"value": "ff8289874f5d45de945a2ea5c02580fe",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:3000/admin/organisations",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"organisations"
							]
						},
						"description": "This request gets all the Organisations. These are the root objects in the Dashboard database, which other objects are linked to.\n\nOrganistaions enable multi-tenancy in the Tyk Dashboard."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Basic Test Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "435fcae3-e889-4226-aff8-fc7b7f589783",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/basic-open-api/get",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"basic-open-api",
						"get"
					]
				},
				"description": "This is a basic test request to check that the Gateway is working ok.\n\nA `200 OK` status code and JSON response should be received in the response."
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}