{
	"info": {
		"_postman_id": "57945f11-5a90-4102-9eae-23c47b162e92",
		"name": "Tyk Demo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "API Definition",
			"item": [
				{
					"name": "Middleware",
					"item": [
						{
							"name": "Middleware - JavaScript",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c477bb6-d7ec-45bd-b688-cdd2c983d527",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body data set by JW middleware\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.eql(\"Request body set by pre middleware\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Deleted",
										"value": "deleted value",
										"type": "text"
									},
									{
										"key": "Accepted",
										"value": "789",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8080/javascript-middleware-api/post?deleted=deleted-value&accepted=456",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"javascript-middleware-api",
										"post"
									],
									"query": [
										{
											"key": "deleted",
											"value": "deleted-value"
										},
										{
											"key": "accepted",
											"value": "456"
										}
									]
								},
								"description": "Calls the `JavaScript Middleware API`, which executes two JavaScript middleware functions at the `pre` and `post` hooks.\n\nThe `pre` function does the following:\n- Writes to the API Gateway application log\n- Adds `User-Agent` header\n- Deletes `Deleted` header\n- Adds `added` URL parameter\n- Deletes `deleted` URL parameter\n- Changes the request body - see `data` property of response object\n- Changes the requested URL - see `url` property of response object\n\nThe `post` function does the following:\n- Writes to the API Gateway application log\n- Adds `config-data` header using value taken from API definition `config data`"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Endpoint Designer",
					"item": [
						{
							"name": "Plugin - Mock Response",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-version",
										"value": "Default",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/mock",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"mock"
									]
								},
								"description": "This request uses the `Mock Response` Endpoint Designer plugin to return a response directly from the Gateway when the API endpoint is called.\n\nThe mock response sets the response:\n- HTTP status code: `200 OK`\n- Body: See the mock JSON object in the response body\n- Headers: See the `Mock` header in the repsonse headers\n\nWhen the Mock Response is executed, the request does not reach the API Server.\n\nThis plugin is defined in the Endpoint Designer of the API Definition. It is set to execute on requests for the `Default` version of the API only, see part 2 of this plugin to see what happens when version `2` is requested instead. Control of the version is"
							},
							"response": []
						},
						{
							"name": "Plugin - Blacklist",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/blacklist",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"blacklist"
									]
								},
								"description": "The Blacklist plugin blocks requests, returning a `403 Forbidden` response."
							},
							"response": []
						},
						{
							"name": "Plugin - Circuit Breaker",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/status/500",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"status",
										"500"
									]
								},
								"description": "The Circuit Breaker can protect API servers by blocking requests for endpoints which are consistently returning errors.\n\nThe plugin monitors the responses from the API server for errors. If the API server returns over a certain number of errors over a particular number of requests then the API Gateway will stop proxing requests to it for a number of seconds. When the circuit breaker is activated, the API Gateway returns a `503 Service Unavailable` response.\n\nIn this example, the endpoint called by this request always returns `500 Server Error` responses, so will easily trigger the circuit breaker. The circuit breaker has been set up to sample 4 requests, and if over 50% of them result in errors then the circuit breaker will be active for 15 seconds."
							},
							"response": []
						},
						{
							"name": "Plugin - Body Transform",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<servers version=\"1\">\n  <server>\n    <serverName>Shanghai_VPN</serverName>\n    <serverIP>127.0.0.1</serverIP>\n  </server>\n  <server>\n    <serverName>Beijing_VPN</serverName>\n    <serverIP>127.0.0.2</serverIP>\n  </server>\n</servers>"
								},
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/body-transform",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"body-transform"
									]
								},
								"description": "The Body Transform plugin can transform data in XML and JSON formats using templates. The output format can be anything, it depends entirely on the template. Transforms can be applied to both requests and responses.\n\nThis example applies a transform on the request, changing it from XML to JSON. You can see the request body is an XML document, but the response shows that the API server receive the data as JSON - you can verify this by checking the `data` and `json` properties of the response body."
							},
							"response": []
						},
						{
							"name": "Plugin - Enforced Timeout (part 1)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/delay/10",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"delay",
										"10"
									]
								},
								"description": "The Enforced Timeout plugin will return a response from the Gateway if the API server does not response within a set time. \n\nThis request calls the `/delay/10` endpoint, which has a 10 second delay before responding. The endpoint uses the Enforced Timeout plugin, which is configured for 3 seconds, so will repsond with a `504 Gateway Timeout` before the API server can provide a response."
							},
							"response": []
						},
						{
							"name": "Plugin - Enforced Timeout (part 2)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/delay/10",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"delay",
										"10"
									]
								},
								"description": "This endpoint has the same configuration at part 1, but because this endpoint only has a 1 second delay, it responds in time, so the API client receives the API server response and the Enforced Timeout is not activated."
							},
							"response": []
						},
						{
							"name": "Plugin - URL Rewrite (part 1)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/delay/3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"delay",
										"3"
									]
								},
								"description": "The URL Rewrite plugin can rewrite the URL based on many different parameters. This example shows the most basic version, using the default rewrite, which is used if none of the advanced rewrite rules are triggered. In this case, it rewrites to `/anything/default-rewrite` - check the `url` property in the response body to see the URL which was called on the API server.\n\nThe advanced rewriter can perform rewriting based on many aspects of a request:\n\n- URL query\n- Header\n- Path\n- Body\n- Session metadata\n- Context data\n\nSee the other parts of the URL Rewrite example for examples of the advanced URL rewriting rules."
							},
							"response": []
						},
						{
							"name": "Plugin - URL Rewrite (part 2)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/delay/3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"delay",
										"3"
									]
								},
								"description": "This example triggers an advanced URL rewrite rule based on the URL parameter. It checks for a parameter with the key `query` and value `rewrite`. The plugin rewrites to the URL `/anything/rewrite-query`."
							},
							"response": []
						},
						{
							"name": "Plugin - URL Rewrite (part 3)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/delay/3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"delay",
										"3"
									]
								},
								"description": "This example triggers an advanced URL rewrite rule based on the request headers. It checks for a header with the key `Header` and value `rewrite`. The plugin rewrites to the URL `/anything/rewrite-header`."
							},
							"response": []
						},
						{
							"name": "Plugin - Modify Headers",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/modify-headers",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"modify-headers"
									]
								},
								"description": "To be updated"
							},
							"response": []
						},
						{
							"name": "Plugin - Cache",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-version",
										"type": "text",
										"value": "Default"
									}
								],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/uuid",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"uuid"
									]
								},
								"description": "This request uses the `Cache` Endpoint Designer plugin to return a cached response directly from the Gateway when the API endpoint is called.\n\n- Global Cache is enabled\n- Response from Upstream will be cached for 5 seconds\n\n\nWhen this API executed, the response from upstream API server will be cached and served for upto 5 seconds to the subsequest requests made to same Endpoint.\n\nThis plugin is defined in the Endpoint Designer of the API Definition. It is set to execute on requests for the `Default` version of the API only."
							},
							"response": []
						},
						{
							"name": "Plugin - Validate JSON (part 1)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"lastName\": \"Hoskins\",\n\t\"age\": 71\n}"
								},
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/validate-json",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"validate-json"
									]
								},
								"description": "The Validate JSON plugin will validate the JSON in the request body against a JSON scheme defined in the plugin configuration. If the request fails validation then the API Gateway returns a `422 Unprocessable Entity` HTTP status and a detailed description of the problem in the response body.\n\nFor this example, the JSON sent in the request body did not include a `firstName` property, so the request is rejected with a response specifically referencing the missing property.\n\nFor reference, the JSON schema used in this example:\n\n```\n{\n  \"title\": \"Person\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"firstName\": {\n      \"type\": \"string\"\n    },\n    \"lastName\": {\n      \"type\": \"string\"\n    },\n    \"age\": {\n      \"description\": \"Age in years\",\n      \"type\": \"integer\",\n      \"minimum\": 0\n    }\n  },\n  \"required\": [\"firstName\", \"lastName\"]\n}\n```"
							},
							"response": []
						},
						{
							"name": "Plugin - Validate JSON (part 2)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"firstName\": \"Bob\",\n\t\"lastName\": \"Hoskins\",\n\t\"age\": 71\n}"
								},
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/validate-json",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"validate-json"
									]
								},
								"description": "This example sends a valid payload, so is accepted and a normal response is received from the API server."
							},
							"response": []
						},
						{
							"name": "Plugin - Request Size Limit (part 1)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "1234567890"
								},
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/request-size-limit",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"request-size-limit"
									]
								},
								"description": "The Request Size Limit Plugin validates the size of the request body against defined maximum size in byte.\n\nIn this example, the plugin is configured to only allow requests with a maximum payload size of 9 bytes. The request sends a body with 10 bytes, so is rejected with a `400 Bad Request` response."
							},
							"response": []
						},
						{
							"name": "Plugin - Request Size Limit (part 2)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "123456789"
								},
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/request-size-limit",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"request-size-limit"
									]
								},
								"description": "This example succeeds because the request is 9 bytes, which the same as the configured maximum value in the plugin."
							},
							"response": []
						},
						{
							"name": "Plugin - Method Transform",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/method-transform",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"method-transform"
									]
								},
								"description": "The Method Transform plugin changes the HTTP method used in the request. In this example, it changes the PUT method to a POST. Check the `method` property in the response body to see the method used."
							},
							"response": []
						},
						{
							"name": "Plugin - Track Endpoint",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/track-endpoint",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"track-endpoint"
									]
								},
								"description": "The Track Endpoint plugin will record analytics about the number of times this individual endpoint has been requested. The analytics for this are visible in the Endpoint Popularity report in the Dashboard."
							},
							"response": []
						},
						{
							"name": "Plugin - Global Version Settings",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "global-delete",
										"value": "deleted-header",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/global-version-settings",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"global-version-settings"
									]
								},
								"description": "The Global Version Settings plugin are applied to all endpoints for the version of the API. This plugin allows you to delete and add headers to the request. \n\nFor this example, the plugin will delete the header `global-delete` and will add a header `global-add` with the value `global-value`. Check the response body and you will see the added header, but not the deleted header in the `headers` array.\n\nThis plugin has been configured for the `default` version of the Plugin Demo API, so you will it taking effect on any request using this API version."
							},
							"response": []
						},
						{
							"name": "Plugin - Virtual Endpoint",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/virtual-endpoint",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"virtual-endpoint"
									]
								},
								"description": "The Virtual Endpoint plugin executes JavaScript to generate a response. The JavaScript is defined in the plugin or provided in a file. The JavaScript has access to special Tyk helper functions which make performing certain tasks easy:\n\n- Generating a response\n- Writing to the application log\n- Making an HTTP request\n\nThe JavaScript is executed by a JavaScript virtual machine which runs within the Gateway. When the plugin is run it provide access to the request data, session data and API configuration data. The plugin can also make requests out to other services, allowing for orchestration across multiple upstream API servers.\n\nIn this example, the plugin simply returns a basic plain text response with a `200 OK` status code."
							},
							"response": []
						},
						{
							"name": "Plugin - Whitelist (part 1)",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-version",
										"value": "whitelist",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/whitelist",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"whitelist"
									]
								},
								"description": "The Whitelist plugin causes the API Gateway to reject requests for any endpoints which are not explictly whitelisted. \n\nFor this example a separate version of the Plugin Demo API has been created, called `whitelist`, and it has a single endpoint defined `/anything/whitelist$`. The `$` at the end of the string is the regular expression character for 'end of the string', which if not used would mean that any paths which start `/anything/whitelist` i.e. `/anything/whitelist-123` would also be accepted."
							},
							"response": []
						},
						{
							"name": "Plugin - Whitelist (part 2)",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-version",
										"type": "text",
										"value": "whitelist"
									}
								],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/whitelist-123",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"whitelist-123"
									]
								},
								"description": "This request is rejected as the requested path `/anything/whitelist-123` has not been defined with the Whitelist plugin. The API Gateway responds with a `403 Forbidden` response."
							},
							"response": []
						},
						{
							"name": "Plugin - Whitelist (part 2) Copy",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-version",
										"type": "text",
										"value": "whitelist"
									}
								],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/whitelist-123",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"whitelist-123"
									]
								},
								"description": "This request is rejected as the requested path `/anything/whitelist-123` has not been defined with the Whitelist plugin. The API Gateway responds with a `403 Forbidden` response."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "acfc7e7f-570f-4d77-bc52-cecab69a4962",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f4715ee1-dd68-47ce-828a-b5c9f86ead48",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Versioning",
					"item": [
						{
							"name": "Versioning (part 1) - Mock response",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-version",
										"value": "Default",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/mock",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"mock"
									]
								},
								"description": "This request uses the `Mock Response` Endpoint Designer plugin to demonstrate versioning. It shows how the API Gateway can change behaviour based on the requested version of an API. Using API versioning allows you to redefine how the API Gateway will handle endpoint requests.\n\nThe API used here has two versions:\n- `Default`: the default version, used in this request, which returns a mock response directly from the Gateway\n- `2`: the second version, used in part 2, which returns a response from the API server\n\nBoth versions make a request to the same API and API endpoint. The versioning is controlled by the `x-api-version` header in the request, which the Gateway will check to decide how the handle the request."
							},
							"response": []
						},
						{
							"name": "Versioning (part 2) - Normal response",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-version",
										"type": "text",
										"value": "2"
									}
								],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/mock",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"mock"
									]
								},
								"description": "Part 2 of the versioning example. This request shows that when version `2` of the API is requested, the API Gateway proxies the request to the API server.\n\nThis request uses the same URL as part 1, but uses `2` as the value for the `x-api-version` request header."
							},
							"response": []
						},
						{
							"name": "Versioning (part 3) - Expired version",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-version",
										"type": "text",
										"value": "expired"
									}
								],
								"url": {
									"raw": "http://localhost:8080/plugin-demo-api/anything/mock",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"plugin-demo-api",
										"anything",
										"mock"
									]
								},
								"description": "This request shows that version can be expired. In this case a version called `expired` was created with an expiry date in the past. This means that requests for this version are rejected by the Gateway, with a message provided in the response body which says the version has expired."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Context Variables",
					"item": [
						{
							"name": "Context Variables - Correlation Id",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/basic-open-api/get",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"basic-open-api",
										"get"
									]
								},
								"description": "Header `X-Req-Id` is injected by the Gateway, and can be seen in the response body. \n\nThe header value is a GUID representing the random id assigned to each request by the Gateway. It is configured using the Tyk context variable `$tyk_context.request_id`.\n\nThe value is accessible to various parts of the Tyk middleware chain, so can be used as a reference when processing requests."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Webhooks",
					"item": [
						{
							"name": "Webhooks - Authentication Failure",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "auth-failure-key",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8080/basic-protected-api/get",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"basic-protected-api",
										"get"
									]
								},
								"description": "This example makes an unauthenticated request to the `Basic Protected API`. The API requires authentication so the request fails, as expected, with a `403 Forbidden` response.\n\nThe `Basic Protected API` is configured to use a webhook in the event of authentication failure. This webhook calls another API, passing information about the failed request. You can see this webhook call in the Dashboard analytics, it's made to the `Webhook Receiver` API, and will appear straight after this failed API request to `Basic Protected API`. In the analytics record, check the body of the request to see origin of the request and key which was used.\n\nWebhooks can be set up to handle lots of different types of events, such as rate limit exceeded, quota exceeded etc. They can also be configured with a cooldown time so that the events don't overload the API receiving the webhooks."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Authentication",
					"item": [
						{
							"name": "Token authorization - failure",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8080/basic-security-api/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"basic-security-api",
										""
									]
								},
								"description": "This API will showcase the Token authorization feature of Tyk.\n\nToken (Key) will not be sent in the HTTP header field `Authorization` resulting in HTTP status code `401 Unauthorized` by gateway."
							},
							"response": []
						},
						{
							"name": "Token authorization - success",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "auth_key",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8080/basic-security-api/get",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"basic-security-api",
										"get"
									]
								},
								"description": "This API will showcase the Token authorization feature of Tyk.\n\nToken (Key) will be sent in the HTTP header field `Authorization`."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Rate Limit",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "ratelimit_key",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/basic-protected-api/get",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"basic-protected-api",
								"get"
							]
						},
						"description": "This API will showcase the Rate limiting feature of Tyk.\n\nRate limit is set as 2 per 5 seconds. More than 2 request per 5 will result in `429  Too many requests` error from gateway."
					},
					"response": []
				},
				{
					"name": "Throttling",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "throttle_key"
							}
						],
						"url": {
							"raw": "http://localhost:8080/basic-protected-api/get",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"basic-protected-api",
								"get"
							]
						},
						"description": "This API will showcase the Throttling feature of Tyk.\n\nRate limit is set as 2 per 5 seconds. Gateway Throttling is configured for 10 times with 1 sec interval. \n\nWe can obeserve a delay in response due to throttling after the rate limit has reached."
					},
					"response": []
				},
				{
					"name": "Quota Limit",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "quota_key"
							}
						],
						"url": {
							"raw": "http://localhost:8080/basic-protected-api/get",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"basic-protected-api",
								"get"
							]
						},
						"description": "This API will showcase the Quota limiting feature of Tyk.\n\nQuota limit is set as 2 per hour. More than 2 request per hour will result in `403 Forbidden` error from gateway."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "System Management",
			"item": [
				{
					"name": "Importing Data",
					"item": [
						{
							"name": "Import custom key (part 1)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-tyk-authorization",
										"value": "28d220fd77974a4facfb07dc1e49c2aa",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"last_check\": 0,\n    \"allowance\": 1000,\n    \"rate\": 1000,\n    \"per\": 60,\n    \"throttle_interval\": -1,\n    \"throttle_retry_limit\": -1,\n    \"expires\": 0,\n    \"quota_max\": -1,\n    \"quota_renews\": 1587521934,\n    \"quota_remaining\": -1,\n    \"quota_renewal_rate\": -1,\n    \"access_rights\": {\n        \"accbdd1b89e84ec97f4f16d4e3197d5c\": {\n            \"api_name\": \"Basic Protected API\",\n            \"api_id\": \"accbdd1b89e84ec97f4f16d4e3197d5c\",\n            \"versions\": [\n                \"Default\"\n            ],\n            \"allowed_urls\": [],\n            \"limit\": null,\n            \"allowance_scope\": \"\"\n        }\n    },\n    \"org_id\": \"5e9d9544a1dcd60001d0ed20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/tyk/keys/my-custom-key",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"tyk",
										"keys",
										"my-custom-key"
									]
								},
								"description": "This request uses the Gateway API to import a custom key. The Gateway API is used as the Gateway is responsible for managing keys.\n\nThe URL defines the id that the key will be assigned, in this instance `my-custom-key`, which is very different to the random values assigned by the Gateway when creating keys normally.\n\nOnce imported, the key can be used to access the `Basic Protected API` (see part 2), as defined in the `access_rights` section of the key definition JSON (see request Body)."
							},
							"response": []
						},
						{
							"name": "Import custom key (part 2)",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "my-custom-key",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8080/basic-protected-api/get",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"basic-protected-api",
										"get"
									]
								},
								"description": "This request uses the custom key imported in Part 1 (which must be run prior to this) to access a protected API.\n\nThe custom key is provided in the `Authorization` header."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Scaling",
					"item": [
						{
							"name": "Send request to additional Gateway",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://localhost:8081/plugin-demo-api/anything/mock",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"plugin-demo-api",
										"anything",
										"mock"
									]
								},
								"description": "This request is sent to the container mapped on port `8081`. It is the TLS-enabled Gateway which is otherwise configured the same as the HTTP-only Gateway.\n\nYou can use the `add-gateway.sh` script to add more Gateways. Note that in order to access them using this request, you will need to use `http` and change the port number - the Gateway created by the script has a random port assigned to it."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Gateway Configuration",
			"item": [
				{
					"name": "TLS",
					"item": [
						{
							"name": "TLS request to Gateway",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://localhost:8081/basic-open-api/get",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"basic-open-api",
										"get"
									]
								},
								"description": "This request uses the HTTPS scheme to connect to the API Gateway. The Gateway is configured to listen for requests on `localhost` and use a locally stored self-signed certificate.\n\nThis is configured in the `http_server_options` section of the Gateway's configuration file.\n\n**Note:** self-signed cetificates will fail verification by an API client, which will prevent the request for working. To resolve this, configure your client to allow self-signed certificates."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Basic Test Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7365fa90-561a-48c7-8cb1-6dd6f892f556",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/basic-open-api/get",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"basic-open-api",
						"get"
					]
				},
				"description": "This is a basic test request to check that the Gateway is working ok.\n\nA `200 OK` status code and JSON response should be received in the response."
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}